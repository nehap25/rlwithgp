(define (stream simple_world)
    (:stream s-pose-kin
        :inputs (?obj ?rel_pose ?ref_obj ?pose)
        :domain (and (Obj ?obj) (Obj ?ref_obj) (RelPose ?obj ?rel_pose ?ref_obj) (WorldPose ?ref_obj ?pose))
        :outputs (?world_pose)
        :certified (and (WorldPose ?obj ?world_pose) (PoseKin ?obj ?world_pose ?rel_pose ?ref_obj ?pose))
    )
    (:stream s-push-conf
        :inputs (?robot ?obj ?from_pose ?to_pose)
        :domain (and (Robot ?robot) (Obj ?obj) (WorldPose ?obj ?from_pose) (WorldPose ?obj ?to_pose))
        :outputs (?from_conf ?to_conf)
        :certified (and (Conf ?from_conf) (Conf ?to_conf)
                        (PushConf ?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose)
                   )
    )
    ; (:stream s-touch-region
    ;     :inputs (?obj ?region)
    ;     :domain (and (Obj ?obj) (Region ?region))
    ;     :outputs (?pose)
    ;     :certified (and (WorldPose ?obj ?pose) (Touches ?obj ?pose ?region))
  	; )
    (:stream t-cfree-push
        :inputs (?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose ?other_obj ?pose)
        :domain (and (Obj ?other_obj) (WorldPose ?other_obj ?pose) (PushConf ?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose))
        :outputs ()
        :certified (CFreePush ?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose ?other_obj ?pose)
    )
    (:stream t-feasible
        :inputs (?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose ?other_obj ?pose)
        :domain (and (Obj ?other_obj) (WorldPose ?other_obj ?pose) (PushConf ?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose))
        :outputs ()
        :certified (Feasible ?robot ?from_conf ?to_conf ?obj ?from_pose ?to_pose ?other_obj ?pose)
    )
    (:stream t-touches
        :inputs (?obj ?pose ?region)
        :domain (and (Obj ?obj) (WorldPose ?obj ?pose) (Region ?region))
        :outputs ()
        :certified (Touches ?obj ?pose ?region)
    )
)
